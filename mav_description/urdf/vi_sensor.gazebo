<?xml version="1.0"?>
<robot>

  <!-- Left Camera -->
  <gazebo reference="camera_left_link">
    <sensor type="camera" name="camera_left">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>752</width>
          <height>480</height>
          <format>L8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>30</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>vi_sensor/camera_left</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_left_link</frameName>
        <hackBaseline>0.0</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
    <turnGravityOff>true</turnGravityOff>
    <material>Gazebo/Blue</material>
  </gazebo>

  <!-- Right Camera -->
  <gazebo reference="camera_right_link">
    <sensor type="camera" name="camera_right">
      <update_rate>30.0</update_rate>
      <camera name="head">
        <horizontal_fov>1.3962634</horizontal_fov>
        <image>
          <width>752</width>
          <height>480</height>
          <format>L8</format>
        </image>
        <clip>
          <near>0.02</near>
          <far>30</far>
        </clip>
        <noise>
          <type>gaussian</type>
          <!-- Noise is sampled independently per pixel on each frame.
               That pixel's noise value is added to each of its color
               channels, which at that point lie in the range [0,1]. -->
          <mean>0.0</mean>
          <stddev>0.007</stddev>
        </noise>
      </camera>
      <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
        <alwaysOn>true</alwaysOn>
        <updateRate>0.0</updateRate>
        <cameraName>vi_sensor/camera_right</cameraName>
        <imageTopicName>image_raw</imageTopicName>
        <cameraInfoTopicName>camera_info</cameraInfoTopicName>
        <frameName>camera_right_link</frameName>
        <hackBaseline>0.0</hackBaseline>
        <distortionK1>0.0</distortionK1>
        <distortionK2>0.0</distortionK2>
        <distortionK3>0.0</distortionK3>
        <distortionT1>0.0</distortionT1>
        <distortionT2>0.0</distortionT2>
      </plugin>
    </sensor>
    <turnGravityOff>true</turnGravityOff>
    <material>Gazebo/Blue</material>
  </gazebo>


  <gazebo>
    <plugin filename="libmav_gazebo_pose_plugin.so" name="ground_truth_pose">
      <linkName>vi_sensor_link</linkName>
      <robotNamespace>vi_sensor</robotNamespace>
      <poseTopic>ground_truth/pose</poseTopic>
      <measurementDivisor>1</measurementDivisor>
      <measurementDelay>0</measurementDelay>
      <noiseNormalP>0 0 0</noiseNormalP>
      <noiseNormalQ>0 0 0</noiseNormalQ>
      <noiseUniformP>0 0 0</noiseUniformP>
      <noiseUniformQ>0 0 0</noiseUniformQ>
    </plugin>
  </gazebo>

  <gazebo>
    <plugin filename="libmav_gazebo_trajectory_plugin.so" name="camera_trajectory">
      <linkName>vi_sensor_link</linkName>
      <robotNamespace>vi_sensor</robotNamespace>
      <imuTopic>ground_truth/imu</imuTopic>
    </plugin>
  </gazebo>

  <gazebo>
    <!-- IMU -->
    <plugin filename="libhector_gazebo_ros_imu.so" name="imu_ros">
      <!-- parameters according to http://wiki.ros.org/hector_gazebo_plugins#GazeboRosImu -->
      <robotNamespace>vi_sensor</robotNamespace>
      <bodyName>imu_link</bodyName> <!-- (string, required): name of the body which holds the IMU sensor -->
      <topicName>imu</topicName> <!-- (string): name of the sensor output topic and prefix of service names (defaults to imu) -->
      <accelOffset>0.0 0.0 0.0</accelOffset> <!-- (Vector3): constant acceleration offset -->
      <accelDrift>0.0 0.0 0.0</accelDrift> <!-- (Vector3): standard deviation of the acceleration drift error -->
      <accelDriftFrequency>${1.0/3600.0} ${1.0/3600.0} ${1.0/3600.0}</accelDriftFrequency> <!-- (Vector3): mean frequency of the acceleration drift -->
      <accelGaussianNoise>0.0 0.0 0.0</accelGaussianNoise> <!-- (Vector3): standard deviation of the additive Gaussian acceleration noise -->
      <rateOffset>0.0 0.0 0.0</rateOffset> <!-- (Vector3): constant rate offset -->
      <rateDrift>0.0 0.0 0.0</rateDrift> <!-- (Vector3): standard deviation of the rate drift error -->
      <rateDriftFrequency>${1.0/3600.0} ${1.0/3600.0} ${1.0/3600.0}</rateDriftFrequency> <!-- (Vector3): mean frequency of the rate drift -->
      <rateGaussianNoise>0.0 0.0 0.0</rateGaussianNoise> <!-- (Vector3): standard deviation of the additive Gaussian rate noise -->
      <headingOffset>0.0</headingOffset> <!-- (double): constant heading offset -->
      <headingDrift>0.0</headingDrift> <!-- (double): standard deviation of the heading drift error -->
      <headingDriftFrequency>${1.0/3600.0}</headingDriftFrequency> <!-- (double): mean frequency of the heading drift -->
      <headingGaussianNoise>0.0</headingGaussianNoise> <!-- (double): standard deviation of the heading additive Gaussian noise -->
      <rpyOffsets>0.0 0.0 0.0</rpyOffsets> <!-- (Vector3): if non-zero, used to calculate accelOffset and headingOffset so that resulting roll, pitch and yaw errors correspond to this values when the platform is leveled (for compatibility with gazebo_plugins) -->
    </plugin>
  </gazebo>
  <gazebo reference="imu_link">
    <turnGravityOff>true</turnGravityOff>
    <material>Gazebo/Red</material>
  </gazebo>

</robot>
