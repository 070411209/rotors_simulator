<launch>
  <param name="use_sim_time" value="false" />
  <arg name="mav_name" default="firefly"/>
  <arg name="mav_name_1" default="firefly_stereo_camera"/>
  <arg name="world_name" default="basic"/>
  <arg name="enable_logging" default="false" />
  <arg name="enable_ground_truth" default="true" />
  <arg name="log_file" default="$(arg mav_name)" />
  <arg name="debug" default="false"/>
  <arg name="gui" default="true"/>
  <arg name="paused" default="true"/>
  <!-- The following line causes gzmsg and gzerr messages to be printed to the console
      (even when Gazebo is started through roslaunch) -->
  <arg name="verbose" default="false"/>
  <!-- vehicle pose -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0"/>
  <arg name="R" default="0"/>
  <arg name="P" default="0"/>
  <arg name="Y" default="0"/>

  <env name="GAZEBO_MODEL_PATH" value="${GAZEBO_MODEL_PATH}:$(find rotors_gazebo)/models"/>
  <env name="GAZEBO_RESOURCE_PATH" value="${GAZEBO_RESOURCE_PATH}:$(find rotors_gazebo)/models"/>
  <arg name="sdf" default="$(find rotors_gazebo)/models/$(arg mav_name_1)/$(arg mav_name_1).sdf"/>
    
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name" value="$(find rotors_gazebo)/worlds/$(arg world_name).world" />
    <arg name="debug" value="$(arg debug)" />
    <arg name="paused" value="$(arg paused)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="verbose" value="$(arg verbose)"/>
  </include>
  
  <remap from="odometry" to="/firefly/odometry_sensor1/odometry" />
  
  <!-- gazebo model -->
  <node name="$(anon vehicle_spawn)" pkg="gazebo_ros" respawn="false" type="spawn_model" output="screen" args="-sdf -file $(arg sdf) -model $(arg mav_name) -x $(arg x) -y $(arg y) -z $(arg z) -R $(arg R) -P $(arg P) -Y $(arg Y)"/>

  <group ns="$(arg mav_name)">
    <node name="lee_position_controller_node" pkg="rotors_control" type="lee_position_controller_node" output="screen">
      <rosparam command="load" file="$(find rotors_gazebo)/resource/lee_controller_$(arg mav_name).yaml" />
      <rosparam command="load" file="$(find rotors_gazebo)/resource/$(arg mav_name).yaml" />
      <remap from="odometry" to="odometry_sensor1/odometry" />
    </node>
    <node name="hovering_example" pkg="rotors_gazebo" type="hovering_example" output="screen"/>
    <!-- <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />
    <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" /> -->

  </group>

  <!-- Launch stereo_image_proc node which runs OpenCV's block matching  -->
  <node ns="stereo" pkg="stereo_image_proc" type="stereo_image_proc" name="stereo_image_proc">
    <param name="stereo_algorithm" type="double" value="1.0" />
    <param name="correlation_window_size" type="double" value="19.0" />
    <param name="disparity_range" type="double" value="32.0" />
    <param name="uniqueness_ratio" type="double" value="40.0" />
    <param name="speckle_size" type="double" value="1000.0" />
    <param name="speckle_range" type="double" value="2.0" />
  </node>
  

  <node pkg="tf" type="static_transform_publisher" name="tf_laser0"
        args="0 0 0 0 0 0 firefly/base_link firefly/odometry_sensor1_link 100"/>

  <node pkg="tf" type="static_transform_publisher" name="tf_laser1"
        args="0 0 0 0 0 0 firefly/base_link firefly/odometry_sensorgt_link 100"/>

  <node pkg="tf" type="static_transform_publisher" name="tf_laser2"
        args="0 0 0 0 0 0 firefly/base_link firefly/imugt_link 100"/>

  <node pkg="tf" type="static_transform_publisher" name="tf_laser3"
        args="0 0 0 0 0 0 firefly/base_link firefly/imu_link 100"/>

  <node pkg="tf" type="static_transform_publisher" name="tf_laser4"
        args="0 0 0 0 0 0 firefly/base_link firefly/imu_link 100"/>        

  <node pkg="tf" type="static_transform_publisher" name="tf_laser5"
        args="0 0 0 0 0 0 firefly/base_link firefly/base_link_inertia 100"/> 

  <node pkg="tf" type="static_transform_publisher" name="tf_laser6"
        args="0 0 0 0 0 0 firefly/base_link firefly/rotor_0 100"/> 

  <node pkg="tf" type="static_transform_publisher" name="tf_laser7"
        args="0 0 0 0 0 0 firefly/base_link firefly/rotor_1 100"/>

  <node pkg="tf" type="static_transform_publisher" name="tf_laser8"
        args="0 0 0 0 0 0 firefly/base_link firefly/rotor_2 100"/>


  <node pkg="tf" type="static_transform_publisher" name="tf_laser9"
        args="0 0 0 0 0 0 firefly/base_link firefly/rotor_3 100"/>

  <node pkg="tf" type="static_transform_publisher" name="tf_laser11"
        args="0 0 0 0 0 0 firefly/base_link firefly/rotor_4 100"/>

  <node pkg="tf" type="static_transform_publisher" name="tf_laser14"
        args="0 0 0 0 0 0 firefly/base_link firefly/rotor_5 100"/>

  <!-- <node pkg="tf" type="static_transform_publisher" name="/gazebo"
        args="0 0 0 0 0 0 world firefly/odometry_sensor1 100"/> -->

</launch>
